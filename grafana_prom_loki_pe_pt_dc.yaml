# ----------------------------------------------------------------------
# Declare any networks that the containers need for interconnectivity: -
# ----------------------------------------------------------------------
networks:
  default:
    name: dc-net1

services:
# ----------------------------------
# Configure the Grafana container: -
# ----------------------------------
  grafana:
    image: andymp/grafana-pe-pt-stack:v5
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    ports:
      - "3000:3000"
#    networks:
#     - default
    depends_on:
      - prometheus
      - loki

# -------------------------------------
# Configure the Prometheus container: -
# -------------------------------------
  prometheus:
    image: andymp/prometheus-pe-pt-stack:v5
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
#
#   Added the --web.enable-lifecycle flag to allow Prometheus to reload its configuration dynamically with
#   an external curl command in the form: curl -X POST http://prometheus:9090/-/reload
#
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles --web.enable-lifecycle
#   networks:
#     - default

# ---------------------------------------
# Configure the Grafana Loki container: -
# ---------------------------------------
  loki:
#   image: andymp/loki-v2.9.2-pe-pt-stack:v1
    image: grafana/loki:2.9.2
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
#   networks:
#     - default

# ---------------------------------------
# Configure the Grafana Loki container: -
# ---------------------------------------
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
#   networks:
#     - default

# ----------------------------------------
# Configure the Node Exporter container: -
# ----------------------------------------
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - '/:/host:ro'
    ports:
      - "9100:9100"

# -----------------------------------
# Configure the cadvisor container: -
# -----------------------------------
# cadvisor:
#   image: gcr.io/cadvisor/cadvisor:latest
#   container_name: cadvisor
#   restart: unless-stopped
#   privileged: true
#   volumes:
#     - "/:/rootfs:ro"
#     - "/var/run:/var/run:ro"
#     - "/sys:/sys:ro"
#     - "/var/lib/docker/:/var/lib/docker:ro"
#     - "/dev/disk/:/dev/disk:ro"
    # Tell cadvisor to look at the Docker Desktop endpoint, not the standard Docker endpoint;
    # view the different endpoints with `docker context ls`
#   command: --docker="unix:///Users/andy/.docker/run/docker.sock"
#   expose:
#     - 8080
#   ports:
#     - "8080:8080"
#   networks:
#     - default

#------------------------------------------------------------------------------------------
# Configure the CentOS v8 container which generates the metrics/logs for Prometheus/Loki: -
#------------------------------------------------------------------------------------------
  centos:
    image: andymp/centos-v8-pe-pt-stack:v10
    container_name: centos
    restart: unless-stopped
  # Need to add the NET_ADMIN Linux capability to run iperf3 on the container.
    cap_add:
      - NET_ADMIN
#   volumes:
#     - /var/log:/var/log
    ports:
      - "5002:5002"
      - "9256:9256"
      - "9257:9257"
    entrypoint:
      - bash
      - -c
      - /root/entrypoint.sh
#   networks:
#     - default
    deploy:
      resources:
        reservations:
          cpus: '1'
          memory: 300M
        limits:
          cpus: '2'
          memory: 500M
